// –ú–∏–∫—Ä–æ–ë–ë–æ–∫—Å - –°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
class MicroBoxController {
    constructor() {
        this.deviceType = 'unknown';
        this.controlMode = 'tank';
        this.effectMode = 'normal';
        this.isConnected = false;
        this.vrEnabled = false;
        this.gamepadIndex = -1;
        
        // –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å—Ç–∏–∫–æ–≤
        this.leftJoystick = { x: 0, y: 0, active: false };
        this.rightJoystick = { x: 0, y: 0, active: false };
        
        // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∫–ª–∞–≤–∏—à
        this.keyStates = {};
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏
        this.speedSensitivity = 80;
        this.turnSensitivity = 70;
        
        // WebXR –¥–ª—è VR
        this.xrSession = null;
        this.controllers = [];
        
        // VR —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–Ω–æ–ø–æ–∫
        this.vrTriggerPressed = false;
        this.vrGripPressed = false;
        this.vrButtonAPressed = false;
        this.vrButtonBPressed = false;
        this.lastVRLeftSpeed = 0;
        this.lastVRRightSpeed = 0;
        
        this.init();
    }

    async init() {
        console.log('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ú–∏–∫—Ä–æ–ë–ë–æ–∫—Å –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞...');
        
        // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        this.detectDeviceType();
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        this.setupInterface();
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–∞–º–µ—Ä—ã
        this.setupCameraStream();
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ–±—ã—Ç–∏–π
        this.setupEventListeners();
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ VR –ø–æ–¥–¥–µ—Ä–∂–∫–∏
        await this.checkVRSupport();
        
        // –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
        this.startMainLoop();
        
        // –°–∫—Ä—ã—Ç—å —ç–∫—Ä–∞–Ω –∑–∞–≥—Ä—É–∑–∫–∏
        setTimeout(() => {
            document.getElementById('loading').classList.add('hidden');
            document.getElementById('mainInterface').classList.remove('hidden');
        }, 2000);
        
        console.log('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    }

    setupCameraStream() {
        const streamImg = document.getElementById('cameraStream');
        if (streamImg) {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Ä—Ç 81 –¥–ª—è –∫–∞–º–µ—Ä—ã-—Å–µ—Ä–≤–µ—Ä–∞
            const streamUrl = window.location.protocol + '//' + window.location.hostname + ':81/stream';
            streamImg.src = streamUrl;
            console.log('–ö–∞–º–µ—Ä–∞ —Å—Ç—Ä–∏–º:', streamUrl);
        }
    }


    detectDeviceType() {
        const isMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
        const isTablet = /iPad|Android/i.test(navigator.userAgent) && window.innerWidth > 768;
        const isOculusBrowser = /OculusBrowser/i.test(navigator.userAgent);
        
        // –ï—Å–ª–∏ —ç—Ç–æ Oculus –±—Ä–∞—É–∑–µ—Ä, –Ω–µ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫ VR –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
        // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É –≤—Ö–æ–¥–∞ –≤ VR
        if (isOculusBrowser || isMobile) {
            this.deviceType = 'mobile';
        } else if (isTablet) {
            this.deviceType = 'tablet';
        } else {
            this.deviceType = 'desktop';
        }
        
        document.getElementById('deviceType').textContent = this.getDeviceTypeText();
        console.log('–¢–∏–ø —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:', this.deviceType);
        console.log('Oculus Browser:', isOculusBrowser);
    }

    getDeviceTypeText() {
        switch (this.deviceType) {
            case 'mobile': return 'üì± –ú–æ–±–∏–ª—å–Ω—ã–π';
            case 'tablet': return 'üì± –ü–ª–∞–Ω—à–µ—Ç';
            case 'desktop': return 'üñ•Ô∏è –ü–ö';
            case 'vr': return 'ü•Ω VR';
            default: return '‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
        }
    }

    setupInterface() {
        // –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        const pcControls = document.getElementById('pcControls');
        const mobileControls = document.getElementById('mobileControls');
        const vrControls = document.getElementById('vrControls');

        // –°–∫—Ä—ã—Ç—å –≤—Å–µ
        pcControls.classList.add('hidden');
        mobileControls.classList.add('hidden');
        vrControls.classList.add('hidden');

        // –ü–æ–∫–∞–∑–∞—Ç—å –Ω—É–∂–Ω—ã–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏
        // VR –∫–æ–Ω—Ç—Ä–æ–ª—ã –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –∞–∫—Ç–∏–≤–Ω–∞ VR —Å–µ—Å—Å–∏—è
        switch (this.deviceType) {
            case 'desktop':
                pcControls.classList.remove('hidden');
                break;
            case 'mobile':
            case 'tablet':
                mobileControls.classList.remove('hidden');
                this.setupMobileJoysticks();
                break;
        }
    }

    setupEventListeners() {
        // Fullscreen –∫–Ω–æ–ø–∫–∞
        const fullscreenBtn = document.getElementById('fullscreenBtn');
        if (fullscreenBtn) {
            fullscreenBtn.addEventListener('click', () => this.toggleFullscreen());
        }
        
        // –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ü–ö
        if (this.deviceType === 'desktop') {
            document.addEventListener('keydown', (e) => this.handleKeyDown(e));
            document.addEventListener('keyup', (e) => this.handleKeyUp(e));
            
            // –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            document.querySelectorAll('.control-btn').forEach(btn => {
                btn.addEventListener('mousedown', (e) => this.handleControlButton(e, true));
                btn.addEventListener('mouseup', (e) => this.handleControlButton(e, false));
                btn.addEventListener('mouseleave', (e) => this.handleControlButton(e, false));
            });
        }

        // –ì–µ–π–º–ø–∞–¥—ã
        window.addEventListener('gamepadconnected', (e) => this.handleGamepadConnected(e));
        window.addEventListener('gamepaddisconnected', (e) => this.handleGamepadDisconnected(e));

        // –°–µ–ª–µ–∫—Ç–æ—Ä—ã —Ä–µ–∂–∏–º–æ–≤
        const controlModeSelect = document.getElementById('controlMode');
        const effectModeSelect = document.getElementById('effectMode');
        
        if (controlModeSelect) {
            controlModeSelect.addEventListener('change', (e) => {
                this.controlMode = e.target.value;
                this.sendCommand('setControlMode', { mode: this.controlMode });
            });
        }
        
        if (effectModeSelect) {
            effectModeSelect.addEventListener('change', (e) => {
                this.effectMode = e.target.value;
                this.sendCommand('setEffectMode', { mode: this.effectMode });
            });
        }

        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
        const flashlightBtn = document.getElementById('flashlightBtn') || document.getElementById('mobileFlashlight');
        const hornBtn = document.getElementById('hornBtn') || document.getElementById('mobileHorn');
        const updateBtn = document.getElementById('updateBtn') || document.getElementById('mobileUpdate');
        
        if (flashlightBtn) {
            flashlightBtn.addEventListener('click', () => this.toggleFlashlight());
        }
        
        if (hornBtn) {
            hornBtn.addEventListener('mousedown', () => this.startHorn());
            hornBtn.addEventListener('mouseup', () => this.stopHorn());
            hornBtn.addEventListener('touchstart', () => this.startHorn());
            hornBtn.addEventListener('touchend', () => this.stopHorn());
        }
        
        if (updateBtn) {
            updateBtn.addEventListener('click', () => this.enterUpdateMode());
        }

        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏
        const settingsBtn = document.getElementById('mobileSettings');
        if (settingsBtn) {
            settingsBtn.addEventListener('click', () => this.showSettings());
        }

        // –ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞
        this.setupModalHandlers();
    }

    setupMobileJoysticks() {
        const leftJoystick = document.getElementById('leftJoystick');
        const rightJoystick = document.getElementById('rightJoystick');
        
        this.setupJoystick(leftJoystick, 'left');
        this.setupJoystick(rightJoystick, 'right');
    }

    setupJoystick(element, side) {
        let isDragging = false;
        let startX, startY;
        const knob = element.querySelector('.joystick-knob');
        const maxDistance = 40; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Ç —Ü–µ–Ω—Ç—Ä–∞

        const handleStart = (e) => {
            isDragging = true;
            element.classList.add('active');
            
            const rect = element.getBoundingClientRect();
            const centerX = rect.left + rect.width / 2;
            const centerY = rect.top + rect.height / 2;
            
            startX = centerX;
            startY = centerY;
            
            e.preventDefault();
        };

        const handleMove = (e) => {
            if (!isDragging) return;
            
            const clientX = e.clientX || (e.touches && e.touches[0].clientX);
            const clientY = e.clientY || (e.touches && e.touches[0].clientY);
            
            const deltaX = clientX - startX;
            const deltaY = clientY - startY;
            const distance = Math.sqrt(deltaX * deltaX + deltaY * deltaY);
            
            let x = deltaX;
            let y = deltaY;
            
            if (distance > maxDistance) {
                const angle = Math.atan2(deltaY, deltaX);
                x = Math.cos(angle) * maxDistance;
                y = Math.sin(angle) * maxDistance;
            }

            knob.style.transform = 'translate(' + x + 'px, ' + y + 'px)';

            // –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∑–Ω–∞—á–µ–Ω–∏–π (-1 –¥–æ 1)
            const normalizedX = x / maxDistance;
            const normalizedY = -y / maxDistance; // –ò–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º Y
            
            if (side === 'left') {
                this.leftJoystick = { x: normalizedX, y: normalizedY, active: true };
            } else {
                this.rightJoystick = { x: normalizedX, y: normalizedY, active: true };
            }
            
            this.updateMovement();
        };

        const handleEnd = () => {
            if (!isDragging) return;
            
            isDragging = false;
            element.classList.remove('active');
            knob.style.transform = 'translate(0px, 0px)';
            
            if (side === 'left') {
                this.leftJoystick = { x: 0, y: 0, active: false };
            } else {
                this.rightJoystick = { x: 0, y: 0, active: false };
            }
            
            this.updateMovement();
        };

        // –ú—ã—à—å —Å–æ–±—ã—Ç–∏—è
        element.addEventListener('mousedown', handleStart);
        document.addEventListener('mousemove', handleMove);
        document.addEventListener('mouseup', handleEnd);

        // –°–µ–Ω—Å–æ—Ä–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
        element.addEventListener('touchstart', handleStart);
        document.addEventListener('touchmove', handleMove);
        document.addEventListener('touchend', handleEnd);
    }

    handleKeyDown(e) {
        this.keyStates[e.code] = true;
        this.updateMovementFromKeyboard();
        
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–ª–∞–≤–∏—à–∏
        switch (e.code) {
            case 'Space':
                e.preventDefault();
                this.startHorn();
                break;
            case 'KeyF':
                e.preventDefault();
                this.toggleFlashlight();
                break;
            case 'Digit1':
            case 'Digit2':
            case 'Digit3':
            case 'Digit4':
                e.preventDefault();
                this.setEffectMode(parseInt(e.code.slice(-1)) - 1);
                break;
        }
    }

    handleKeyUp(e) {
        this.keyStates[e.code] = false;
        this.updateMovementFromKeyboard();
        
        if (e.code === 'Space') {
            e.preventDefault();
            this.stopHorn();
        }
    }

    updateMovementFromKeyboard() {
        let leftSpeed = 0;
        let rightSpeed = 0;
        
        // WASD –∏–ª–∏ —Å—Ç—Ä–µ–ª–∫–∏
        const forward = this.keyStates['KeyW'] || this.keyStates['ArrowUp'];
        const backward = this.keyStates['KeyS'] || this.keyStates['ArrowDown'];
        const left = this.keyStates['KeyA'] || this.keyStates['ArrowLeft'];
        const right = this.keyStates['KeyD'] || this.keyStates['ArrowRight'];
        
        if (forward) {
            leftSpeed = this.speedSensitivity;
            rightSpeed = this.speedSensitivity;
        }
        
        if (backward) {
            leftSpeed = -this.speedSensitivity;
            rightSpeed = -this.speedSensitivity;
        }
        
        if (left) {
            leftSpeed -= this.turnSensitivity;
            rightSpeed += this.turnSensitivity;
        }
        
        if (right) {
            leftSpeed += this.turnSensitivity;
            rightSpeed -= this.turnSensitivity;
        }
        
        // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π
        leftSpeed = Math.max(-100, Math.min(100, leftSpeed));
        rightSpeed = Math.max(-100, Math.min(100, rightSpeed));
        
        this.sendMovementCommand(leftSpeed, rightSpeed);
    }

    handleControlButton(e, pressed) {
        const direction = e.target.dataset.direction;
        
        if (pressed) {
            e.target.classList.add('active');
            
            switch (direction) {
                case 'forward':
                    this.sendMovementCommand(this.speedSensitivity, this.speedSensitivity);
                    break;
                case 'backward':
                    this.sendMovementCommand(-this.speedSensitivity, -this.speedSensitivity);
                    break;
                case 'left':
                    this.sendMovementCommand(-this.turnSensitivity, this.turnSensitivity);
                    break;
                case 'right':
                    this.sendMovementCommand(this.turnSensitivity, -this.turnSensitivity);
                    break;
                case 'stop':
                    this.sendMovementCommand(0, 0);
                    break;
            }
        } else {
            e.target.classList.remove('active');
            if (direction !== 'stop') {
                this.sendMovementCommand(0, 0);
            }
        }
    }

    updateMovement() {
        let leftSpeed = 0;
        let rightSpeed = 0;
        
        if (this.controlMode === 'tank') {
            // –¢–∞–Ω–∫–æ–≤—ã–π —Ä–µ–∂–∏–º: –ª–µ–≤—ã–π —Å—Ç–∏–∫ = –ª–µ–≤–∞—è —Å—Ç–æ—Ä–æ–Ω–∞, –ø—Ä–∞–≤—ã–π —Å—Ç–∏–∫ = –ø—Ä–∞–≤–∞—è —Å—Ç–æ—Ä–æ–Ω–∞
            leftSpeed = this.leftJoystick.y * this.speedSensitivity;
            rightSpeed = this.rightJoystick.y * this.speedSensitivity;
        } else if (this.controlMode === 'differential') {
            // –î–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π: –ø—Ä–∞–≤—ã–π —Å—Ç–∏–∫ = —Å–∫–æ—Ä–æ—Å—Ç—å, –ª–µ–≤—ã–π —Å—Ç–∏–∫ = –ø–æ–≤–æ—Ä–æ—Ç
            const speed = this.rightJoystick.y * this.speedSensitivity;
            const turn = this.leftJoystick.x * this.turnSensitivity;
            
            leftSpeed = speed - turn;
            rightSpeed = speed + turn;
        }
        
        // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π
        leftSpeed = Math.max(-100, Math.min(100, leftSpeed));
        rightSpeed = Math.max(-100, Math.min(100, rightSpeed));
        
        this.sendMovementCommand(leftSpeed, rightSpeed);
    }

    sendMovementCommand(leftSpeed, rightSpeed) {
        this.sendCommand('move', {
            left: Math.round(leftSpeed),
            right: Math.round(rightSpeed)
        });
    }

    async sendCommand(command, data = {}) {
        try {
            const response = await fetch('/command', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    command: command,
                    ...data
                })
            });
            
            if (response.ok) {
                this.updateConnectionStatus(true);
                return await response.json();
            } else {
                this.updateConnectionStatus(false);
                console.error('–û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã:', response.statusText);
            }
        } catch (error) {
            this.updateConnectionStatus(false);
            console.error('–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:', error);
        }
    }

    updateConnectionStatus(connected) {
        this.isConnected = connected;
        const indicator = document.getElementById('connectionStatus');
        const text = document.getElementById('connectionText');
        
        if (connected) {
            indicator.classList.add('connected');
            text.textContent = '–ü–æ–¥–∫–ª—é—á–µ–Ω–æ';
        } else {
            indicator.classList.remove('connected');
            text.textContent = '–ù–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è';
        }
    }

    toggleFlashlight() {
        this.sendCommand('flashlight', { toggle: true });
        
        const btn = document.getElementById('flashlightBtn') || document.getElementById('mobileFlashlight');
        if (btn) {
            btn.classList.toggle('active');
        }
    }

    startHorn() {
        this.sendCommand('horn', { state: true });
        
        const btn = document.getElementById('hornBtn') || document.getElementById('mobileHorn');
        if (btn) {
            btn.classList.add('active');
        }
    }

    stopHorn() {
        this.sendCommand('horn', { state: false });
        
        const btn = document.getElementById('hornBtn') || document.getElementById('mobileHorn');
        if (btn) {
            btn.classList.remove('active');
        }
    }

    setEffectMode(mode) {
        const modes = ['normal', 'police', 'fire', 'ambulance'];
        this.effectMode = modes[mode] || 'normal';
        
        this.sendCommand('setEffectMode', { mode: this.effectMode });
        
        const select = document.getElementById('effectMode');
        if (select) {
            select.value = this.effectMode;
        }
    }

    async checkVRSupport() {
        if (navigator.xr) {
            try {
                const supported = await navigator.xr.isSessionSupported('immersive-vr');
                if (supported) {
                    this.vrEnabled = true;
                    console.log('VR –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è');
                    
                    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –≤—Ö–æ–¥–∞ –≤ VR
                    const vrBtn = document.getElementById('vrBtn');
                    if (vrBtn) {
                        vrBtn.classList.remove('hidden');
                        vrBtn.addEventListener('click', () => this.enterVR());
                    }
                } else {
                    console.log('VR –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –±—Ä–∞—É–∑–µ—Ä–æ–º');
                }
            } catch (error) {
                console.log('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ VR –ø–æ–¥–¥–µ—Ä–∂–∫–∏:', error);
            }
        } else {
            console.log('WebXR API –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω');
        }
    }

    async enterVR() {
        if (!this.vrEnabled) {
            alert('VR —Ä–µ–∂–∏–º –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤ —ç—Ç–æ–º –±—Ä–∞—É–∑–µ—Ä–µ');
            return;
        }

        try {
            console.log('–ó–∞–ø—É—Å–∫ VR —Å–µ—Å—Å–∏–∏...');
            
            // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º VR —Å–µ—Å—Å–∏—é —Å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏
            this.xrSession = await navigator.xr.requestSession('immersive-vr', {
                requiredFeatures: ['local-floor'],
                optionalFeatures: ['bounded-floor', 'hand-tracking']
            });

            console.log('VR —Å–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞:', this.xrSession);

            // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ–±—ã—Ç–∏–π —Å–µ—Å—Å–∏–∏
            this.xrSession.addEventListener('end', () => this.onVRSessionEnded());
            
            // –ü–æ–ª—É—á–∞–µ–º reference space
            this.xrReferenceSpace = await this.xrSession.requestReferenceSpace('local-floor');
            
            // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–æ–≤
            this.setupVRControllers();
            
            // –ó–∞–ø—É—Å–∫ VR —Ä–µ–Ω–¥–µ—Ä —Ü–∏–∫–ª–∞
            this.xrSession.requestAnimationFrame((time, frame) => this.onVRFrame(time, frame));
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            this.updateVRUI(true);
            
            console.log('VR —Ä–µ–∂–∏–º –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω');
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞ –≤ VR:', error);
            alert('–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ–π—Ç–∏ –≤ VR —Ä–µ–∂–∏–º: ' + error.message);
        }
    }

    setupVRControllers() {
        console.log('–ù–∞—Å—Ç—Ä–æ–π–∫–∞ VR –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–æ–≤...');
        
        // –°–ª—É—à–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–æ–≤
        this.xrSession.addEventListener('inputsourceschange', (event) => {
            console.log('–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –≤–≤–æ–¥–∞:', event);
            
            if (event.added) {
                event.added.forEach(inputSource => {
                    console.log('–ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –ø–æ–¥–∫–ª—é—á–µ–Ω:', inputSource.handedness, inputSource.targetRayMode);
                    this.controllers.push(inputSource);
                });
            }
            
            if (event.removed) {
                event.removed.forEach(inputSource => {
                    console.log('–ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –æ—Ç–∫–ª—é—á–µ–Ω:', inputSource.handedness);
                    const index = this.controllers.indexOf(inputSource);
                    if (index > -1) {
                        this.controllers.splice(index, 1);
                    }
                });
            }
            
            this.updateVRStatus();
        });
    }

    onVRFrame(time, frame) {
        if (!this.xrSession) return;
        
        // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –∫–∞–¥—Ä
        this.xrSession.requestAnimationFrame((time, frame) => this.onVRFrame(time, frame));
        
        // –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –≤–≤–æ–¥–∞
        const inputSources = this.xrSession.inputSources;
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä—ã
        this.processVRControllers(frame, inputSources);
    }

    processVRControllers(frame, inputSources) {
        let leftThumbstick = { x: 0, y: 0 };
        let rightThumbstick = { x: 0, y: 0 };
        let triggerPressed = false;
        let gripPressed = false;
        let buttonAPressed = false;
        let buttonBPressed = false;
        
        for (const inputSource of inputSources) {
            if (!inputSource.gamepad) continue;
            
            const gamepad = inputSource.gamepad;
            const hand = inputSource.handedness; // 'left' –∏–ª–∏ 'right'
            
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∏–∫–æ–≤ (axes)
            // –í Oculus Quest: axes[2] –∏ axes[3] - —ç—Ç–æ thumbstick X –∏ Y
            if (gamepad.axes && gamepad.axes.length >= 2) {
                if (hand === 'left') {
                    // –õ–µ–≤—ã–π —Å—Ç–∏–∫ –¥–ª—è –ø–æ–≤–æ—Ä–æ—Ç–∞
                    leftThumbstick.x = gamepad.axes[2] || 0;
                    leftThumbstick.y = gamepad.axes[3] || 0;
                } else if (hand === 'right') {
                    // –ü—Ä–∞–≤—ã–π —Å—Ç–∏–∫ –¥–ª—è –¥–≤–∏–∂–µ–Ω–∏—è
                    rightThumbstick.x = gamepad.axes[2] || 0;
                    rightThumbstick.y = gamepad.axes[3] || 0;
                }
            }
            
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
            // –í Oculus Quest:
            // buttons[0] - trigger
            // buttons[1] - grip
            // buttons[3] - thumbstick press
            // buttons[4] - button A/X
            // buttons[5] - button B/Y
            if (gamepad.buttons && gamepad.buttons.length > 0) {
                // Trigger (index 0) - —Å–∏–≥–Ω–∞–ª
                if (gamepad.buttons[0] && gamepad.buttons[0].pressed) {
                    triggerPressed = true;
                }
                
                // Grip (index 1) - —Ñ–æ–Ω–∞—Ä–∏–∫
                if (gamepad.buttons[1] && gamepad.buttons[1].pressed) {
                    gripPressed = true;
                }
                
                // –ö–Ω–æ–ø–∫–∞ A/X (index 4) 
                if (gamepad.buttons.length > 4 && gamepad.buttons[4] && gamepad.buttons[4].pressed) {
                    buttonAPressed = true;
                }
                
                // –ö–Ω–æ–ø–∫–∞ B/Y (index 5)
                if (gamepad.buttons.length > 5 && gamepad.buttons[5] && gamepad.buttons[5].pressed) {
                    buttonBPressed = true;
                }
            }
        }
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º –¥–≤–∏–∂–µ–Ω–∏–µ
        this.updateVRMovement(leftThumbstick, rightThumbstick);
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏
        this.handleVRButtons(triggerPressed, gripPressed, buttonAPressed, buttonBPressed);
    }

    updateVRMovement(leftStick, rightStick) {
        // –ü—Ä–∏–º–µ–Ω—è–µ–º deadzone
        const deadzone = 0.15;
        
        if (Math.abs(leftStick.x) < deadzone) leftStick.x = 0;
        if (Math.abs(leftStick.y) < deadzone) leftStick.y = 0;
        if (Math.abs(rightStick.x) < deadzone) rightStick.x = 0;
        if (Math.abs(rightStick.y) < deadzone) rightStick.y = 0;
        
        let leftSpeed = 0;
        let rightSpeed = 0;
        
        if (this.controlMode === 'tank') {
            // –¢–∞–Ω–∫–æ–≤—ã–π —Ä–µ–∂–∏–º: –ª–µ–≤—ã–π —Å—Ç–∏–∫ = –ª–µ–≤–∞—è —Å—Ç–æ—Ä–æ–Ω–∞, –ø—Ä–∞–≤—ã–π —Å—Ç–∏–∫ = –ø—Ä–∞–≤–∞—è —Å—Ç–æ—Ä–æ–Ω–∞
            leftSpeed = -leftStick.y * this.speedSensitivity;
            rightSpeed = -rightStick.y * this.speedSensitivity;
        } else if (this.controlMode === 'differential') {
            // –î–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π: –ø—Ä–∞–≤—ã–π —Å—Ç–∏–∫ Y = —Å–∫–æ—Ä–æ—Å—Ç—å, –ø—Ä–∞–≤—ã–π —Å—Ç–∏–∫ X = –ø–æ–≤–æ—Ä–æ—Ç
            const speed = -rightStick.y * this.speedSensitivity;
            const turn = rightStick.x * this.turnSensitivity;
            
            leftSpeed = speed - turn;
            rightSpeed = speed + turn;
        }
        
        // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π
        leftSpeed = Math.max(-100, Math.min(100, leftSpeed));
        rightSpeed = Math.max(-100, Math.min(100, rightSpeed));
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—ã —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
        if (leftSpeed !== this.lastVRLeftSpeed || rightSpeed !== this.lastVRRightSpeed) {
            this.sendMovementCommand(leftSpeed, rightSpeed);
            this.lastVRLeftSpeed = leftSpeed;
            this.lastVRRightSpeed = rightSpeed;
        }
    }

    handleVRButtons(trigger, grip, buttonA, buttonB) {
        // Trigger - —Å–∏–≥–Ω–∞–ª (—É–¥–µ—Ä–∂–∏–≤–∞—Ç—å)
        if (trigger && !this.vrTriggerPressed) {
            this.startHorn();
            this.vrTriggerPressed = true;
        } else if (!trigger && this.vrTriggerPressed) {
            this.stopHorn();
            this.vrTriggerPressed = false;
        }
        
        // Grip - —Ñ–æ–Ω–∞—Ä–∏–∫ (–ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø–æ –Ω–∞–∂–∞—Ç–∏—é)
        if (grip && !this.vrGripPressed) {
            this.toggleFlashlight();
            this.vrGripPressed = true;
        } else if (!grip) {
            this.vrGripPressed = false;
        }
        
        // –ö–Ω–æ–ø–∫–∞ A - —Å–º–µ–Ω–∞ —ç—Ñ—Ñ–µ–∫—Ç–∞
        if (buttonA && !this.vrButtonAPressed) {
            this.cycleEffectMode();
            this.vrButtonAPressed = true;
        } else if (!buttonA) {
            this.vrButtonAPressed = false;
        }
        
        // –ö–Ω–æ–ø–∫–∞ B - —Å–º–µ–Ω–∞ —Ä–µ–∂–∏–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        if (buttonB && !this.vrButtonBPressed) {
            this.toggleControlMode();
            this.vrButtonBPressed = true;
        } else if (!buttonB) {
            this.vrButtonBPressed = false;
        }
    }

    cycleEffectMode() {
        const modes = ['normal', 'police', 'fire', 'ambulance'];
        const currentIndex = modes.indexOf(this.effectMode);
        const nextIndex = (currentIndex + 1) % modes.length;
        this.effectMode = modes[nextIndex];
        
        this.sendCommand('setEffectMode', { mode: this.effectMode });
        console.log('–†–µ–∂–∏–º —ç—Ñ—Ñ–µ–∫—Ç–∞:', this.effectMode);
    }

    toggleControlMode() {
        this.controlMode = this.controlMode === 'tank' ? 'differential' : 'tank';
        this.sendCommand('setControlMode', { mode: this.controlMode });
        console.log('–†–µ–∂–∏–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:', this.controlMode);
    }

    updateVRStatus() {
        const vrStatus = document.getElementById('vrStatus');
        if (vrStatus) {
            const controllerCount = this.controllers.length;
            if (controllerCount === 0) {
                vrStatus.textContent = '–ü–æ–∏—Å–∫ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–æ–≤...';
            } else {
                const leftController = this.controllers.find(c => c.handedness === 'left');
                const rightController = this.controllers.find(c => c.handedness === 'right');
                
                let status = `–ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä—ã: ${controllerCount}\n`;
                if (leftController) status += '‚úì –õ–µ–≤—ã–π ';
                if (rightController) status += '‚úì –ü—Ä–∞–≤—ã–π';
                
                vrStatus.textContent = status;
            }
        }
    }

    updateVRUI(inVR) {
        const vrBtn = document.getElementById('vrBtn');
        const vrControls = document.getElementById('vrControls');
        const pcControls = document.getElementById('pcControls');
        const mobileControls = document.getElementById('mobileControls');
        
        if (inVR) {
            if (vrBtn) vrBtn.classList.add('active');
            if (vrControls) vrControls.classList.remove('hidden');
            // –°–∫—Ä—ã—Ç—å –¥—Ä—É–≥–∏–µ –∫–æ–Ω—Ç—Ä–æ–ª—ã –≤ VR —Ä–µ–∂–∏–º–µ
            if (pcControls) pcControls.classList.add('hidden');
            if (mobileControls) mobileControls.classList.add('hidden');
        } else {
            if (vrBtn) vrBtn.classList.remove('active');
            if (vrControls) vrControls.classList.add('hidden');
            // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            this.setupInterface();
        }
    }

    onVRSessionEnded() {
        console.log('VR —Å–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
        this.xrSession = null;
        this.xrReferenceSpace = null;
        this.controllers = [];
        this.updateVRUI(false);
        
        // –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–Ω–æ–ø–æ–∫
        this.vrTriggerPressed = false;
        this.vrGripPressed = false;
        this.vrButtonAPressed = false;
        this.vrButtonBPressed = false;
        this.lastVRLeftSpeed = 0;
        this.lastVRRightSpeed = 0;
        
        // –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–æ–±–æ—Ç–∞
        this.sendMovementCommand(0, 0);
    }

    handleGamepadConnected(e) {
        console.log('–ì–µ–π–º–ø–∞–¥ –ø–æ–¥–∫–ª—é—á–µ–Ω:', e.gamepad);
        this.gamepadIndex = e.gamepad.index;
    }

    handleGamepadDisconnected(e) {
        console.log('–ì–µ–π–º–ø–∞–¥ –æ—Ç–∫–ª—é—á–µ–Ω:', e.gamepad);
        this.gamepadIndex = -1;
    }

    processGamepad() {
        if (this.gamepadIndex === -1) return;
        
        const gamepad = navigator.getGamepads()[this.gamepadIndex];
        if (!gamepad) return;
        
        // –õ–µ–≤—ã–π —Å—Ç–∏–∫ - –ø–æ–≤–æ—Ä–æ—Ç (axes 0, 1)
        // –ü—Ä–∞–≤—ã–π —Å—Ç–∏–∫ - –¥–≤–∏–∂–µ–Ω–∏–µ (axes 2, 3)
        const leftX = gamepad.axes[0];
        const leftY = gamepad.axes[1];
        const rightX = gamepad.axes[2];
        const rightY = gamepad.axes[3];
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ —Å—Ç–∏–∫–∏
        this.leftJoystick = { x: leftX, y: -leftY, active: Math.abs(leftX) > 0.1 || Math.abs(leftY) > 0.1 };
        this.rightJoystick = { x: rightX, y: -rightY, active: Math.abs(rightX) > 0.1 || Math.abs(rightY) > 0.1 };
        
        this.updateMovement();
        
        // –ö–Ω–æ–ø–∫–∏
        if (gamepad.buttons[0] && gamepad.buttons[0].pressed) { // A/X
            this.startHorn();
        } else {
            this.stopHorn();
        }
        
        if (gamepad.buttons[1] && gamepad.buttons[1].pressed) { // B/Circle
            this.toggleFlashlight();
        }
    }

    setupModalHandlers() {
        // –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        const settingsModal = document.getElementById('settingsModal');
        const closeBtn = settingsModal?.querySelector('.close');
        
        if (closeBtn) {
            closeBtn.addEventListener('click', () => {
                settingsModal.classList.add('hidden');
            });
        }
        
        if (settingsModal) {
            settingsModal.addEventListener('click', (e) => {
                if (e.target === settingsModal) {
                    settingsModal.classList.add('hidden');
                }
            });
        }
        
        // –ö–Ω–æ–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
        const saveBtn = document.getElementById('saveSettings');
        if (saveBtn) {
            saveBtn.addEventListener('click', () => this.saveSettings());
        }
    }

    showSettings() {
        const modal = document.getElementById('settingsModal');
        if (modal) {
            modal.classList.remove('hidden');
            
            // –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            document.getElementById('speedSensitivity').value = this.speedSensitivity;
            document.getElementById('turnSensitivity').value = this.turnSensitivity;
            
            // –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—É—â–∏–µ —Ä–µ–∂–∏–º—ã
            document.querySelector('input[name="controlMode"][value="' + this.controlMode + '"]').checked = true;
            document.querySelector('input[name="effectMode"][value="' + this.effectMode + '"]').checked = true;
        }
    }

    saveSettings() {
        // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        this.speedSensitivity = parseInt(document.getElementById('speedSensitivity').value);
        this.turnSensitivity = parseInt(document.getElementById('turnSensitivity').value);
        
        const controlMode = document.querySelector('input[name="controlMode"]:checked');
        const effectMode = document.querySelector('input[name="effectMode"]:checked');
        
        if (controlMode) {
            this.controlMode = controlMode.value;
            this.sendCommand('setControlMode', { mode: this.controlMode });
        }
        
        if (effectMode) {
            this.effectMode = effectMode.value;
            this.sendCommand('setEffectMode', { mode: this.effectMode });
        }
        
        // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ localStorage
        localStorage.setItem('microbox-settings', JSON.stringify({
            speedSensitivity: this.speedSensitivity,
            turnSensitivity: this.turnSensitivity,
            controlMode: this.controlMode,
            effectMode: this.effectMode
        }));
        
        // –ó–∞–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        document.getElementById('settingsModal').classList.add('hidden');
        
        console.log('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã');
    }

    enterUpdateMode() {
        // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—Ö–æ–¥–∞ –≤ —Ä–µ–∂–∏–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤–æ–π—Ç–∏ –≤ —Ä–µ–∂–∏–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—à–∏–≤–∫–∏? –≠—Ç–æ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–æ–±–æ—Ç–∞.')) {
            this.sendCommand('enterUpdateMode').then(() => {
                // –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –≤—Ö–æ–¥–µ –≤ —Ä–µ–∂–∏–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                alert('–†–µ–∂–∏–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –†–æ–±–æ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—Å—è –≤ —Ä–µ–∂–∏–º–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è. –ü–æ–¥–∫–ª—é—á–∏—Ç–µ—Å—å –∫ WiFi "–ú–∏–∫—Ä–æ–ë–ë–æ–∫—Å-–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ" –∏ –æ—Ç–∫—Ä–æ–π—Ç–µ 192.168.4.1');
            });
        }
    }

    loadSettings() {
        const saved = localStorage.getItem('microbox-settings');
        if (saved) {
            try {
                const settings = JSON.parse(saved);
                this.speedSensitivity = settings.speedSensitivity || 80;
                this.turnSensitivity = settings.turnSensitivity || 70;
                this.controlMode = settings.controlMode || 'tank';
                this.effectMode = settings.effectMode || 'normal';
                
                console.log('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã');
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫:', error);
            }
        }
    }
    
    toggleFullscreen() {
        if (!document.fullscreenElement && 
            !document.webkitFullscreenElement && 
            !document.mozFullScreenElement && 
            !document.msFullscreenElement) {
            // –í–æ–π—Ç–∏ –≤ fullscreen
            const elem = document.documentElement;
            if (elem.requestFullscreen) {
                elem.requestFullscreen();
            } else if (elem.webkitRequestFullscreen) {
                elem.webkitRequestFullscreen();
            } else if (elem.mozRequestFullScreen) {
                elem.mozRequestFullScreen();
            } else if (elem.msRequestFullscreen) {
                elem.msRequestFullscreen();
            }
            
            // –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é –≤ –∞–ª—å–±–æ–º–Ω—É—é –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö
            if (screen.orientation && screen.orientation.lock) {
                screen.orientation.lock('landscape').catch(err => {
                    console.log('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é:', err);
                });
            }
        } else {
            // –í—ã–π—Ç–∏ –∏–∑ fullscreen
            if (document.exitFullscreen) {
                document.exitFullscreen();
            } else if (document.webkitExitFullscreen) {
                document.webkitExitFullscreen();
            } else if (document.mozCancelFullScreen) {
                document.mozCancelFullScreen();
            } else if (document.msExitFullscreen) {
                document.msExitFullscreen();
            }
            
            // –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é
            if (screen.orientation && screen.orientation.unlock) {
                screen.orientation.unlock();
            }
        }
    }

    startMainLoop() {
        const loop = () => {
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–µ–π–º–ø–∞–¥–∞
            this.processGamepad();
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
            if (Date.now() % 5000 < 16) { // –ö–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
                this.sendCommand('ping');
            }
            
            requestAnimationFrame(loop);
        };
        
        loop();
    }
}

// –ó–∞–ø—É—Å–∫ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', () => {
    window.microBoxController = new MicroBoxController();
});

// –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è
window.addEventListener('beforeunload', (e) => {
    e.preventDefault();
    e.returnValue = '';
});

console.log('–ú–∏–∫—Ä–æ–ë–ë–æ–∫—Å —Å–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞');