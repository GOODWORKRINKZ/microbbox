import os
import re
import qrcode
import numpy as np
from SCons.Script import Import, DefaultEnvironment

Import("env")
env = DefaultEnvironment()
project_dir = env['PROJECT_DIR']

def generate_qr_code_matrix(text, version=3, ecc=qrcode.constants.ERROR_CORRECT_M):
    qr = qrcode.QRCode(
        version=version,
        error_correction=ecc,
        box_size=1,  # Minimal box size since we only need the matrix
        border=0,  # No border in matrix
    )
    qr.add_data(text)
    qr.make(fit=True)
    matrix = qr.get_matrix()
    return np.array(matrix, dtype=np.uint8)

def compress_qr_code(data):
    height, width = data.shape
    compressed_data = bytearray()

    for y in range(height):
        byte = 0
        for x in range(width):
            if data[y, x] == 0:  # black pixel
                byte |= (1 << (7 - (x % 8)))
            if x % 8 == 7 or x == width - 1:
                compressed_data.append(byte)
                byte = 0
    
    hex_content = ', '.join(f'0x{byte:02x}' for byte in compressed_data)
    return hex_content, len(compressed_data)

def qr_code_to_header(data, var_name):
    height, width = data.shape
    compressed_data, compressed_length = compress_qr_code(data)
    
    content = f"const uint8_t {var_name}[] PROGMEM = {{{compressed_data}}};\n"
    content += f"const int {var_name}_width = {width};\n"
    content += f"const int {var_name}_height = {height};\n"
    content += f"const int {var_name}_compressed_length = {compressed_length};\n"
    
    return content

def save_qr_code_header(text, header_file, var_name):
    qr_data = generate_qr_code_matrix(text)
    header_content = qr_code_to_header(qr_data, var_name)
    with open(header_file, 'a', encoding='utf-8') as file:
        file.write(header_content)

def extract_value(flag):
    return flag.split('=')[1].strip().strip('"')

def read_values_from_header(header_file, keys):
    values = {}
    with open(header_file, 'r', encoding='utf-8') as file:
        content = file.read()
        for key in keys:
            match = re.search(rf'#define\s+{key}\s+(.+)', content)
            if match:
                value = match.group(1).strip()
                if value.startswith('IPAddress('):
                    # Парсинг строки вида IPAddress(10, 0, 0, 5)
                    ip_match = re.search(r'IPAddress\((\d+),\s*(\d+),\s*(\d+),\s*(\d+)\)', value)
                    if ip_match:
                        value = f"{ip_match.group(1)}.{ip_match.group(2)}.{ip_match.group(3)}.{ip_match.group(4)}"
                values[key] = value.strip('"')
    return values

def genQr():
    header_file = os.path.join(project_dir, "include", "globals.h")
    keys = ["WIFI_SSID", "WIFI_PASSWORD", "WIFI_IP", "WIFI_PORT"]
    values = read_values_from_header(header_file, keys)

    ssid = values.get("WIFI_SSID", "FILIN")
    password = values.get("WIFI_PASSWORD", "unknown")
    ip = values.get("WIFI_IP", "10.0.0.5")
    port = values.get("WIFI_PORT", "80")

    wifi_qr_text = f"WIFI:S:{ssid};T:WPA2;P:{password};;"
    update_page_qr_text = f"http://10.0.0.5/"

    output_file = os.path.join(project_dir, "include", "qr_codes.h")
    os.makedirs(os.path.dirname(output_file), exist_ok=True)

    texts = {
        "wifi_qr_code": wifi_qr_text,
        "update_page_qr_code": update_page_qr_text
    }

    with open(output_file, 'w', encoding='utf-8') as file:
        file.write("// Autogenerated QR codes, do not edit\n")
        file.write("#include <cstdint>\n")
        file.write("#include <Arduino.h>\n\n")

    for var_name, text in texts.items():
        save_qr_code_header(text, output_file, var_name)

    print(f"QR codes embedded to {output_file}")

genQr()